{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/inoxwarrior/Harvest/harvest-FE/src/components/posts/ImageUploader.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ReactImageUploadComponent from 'react-images-upload';\n\nfunction ImageUploader({\n  setImgUrl,\n  setUploading\n}) {\n  _s();\n\n  const [payload, setPayload] = useState(null);\n\n  const updateImage = event => {\n    var file = event[0];\n    var data = new FormData();\n    data.append('file', file);\n    data.append('upload_preset', 'harvest');\n    setPayload(data);\n  };\n\n  useEffect(() => {\n    const abortFetch = new AbortController();\n\n    const sendImage = async () => {\n      try {\n        if (payload !== null) {\n          const response = await fetch('https://api.cloudinary.com/v1_1/dcbkjgr7c/image/upload', {\n            method: 'post',\n            body: payload,\n            signal: abortFetch.signal\n          });\n          const jsonResponse = await response.json();\n          setImgUrl(jsonResponse['secure_url']);\n          setUploading(false);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    sendImage();\n    return () => abortFetch.abort();\n  }, [payload, setImgUrl]);\n  return /*#__PURE__*/_jsxDEV(ReactImageUploadComponent, {\n    singleImage: true,\n    onChange: updateImage,\n    buttonText: \"Choose Image\",\n    className: \"imgUploader\",\n    withPreview: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ImageUploader, \"ElvSi9GDSRA5bjYosaFe7y2BVn0=\");\n\n_c = ImageUploader;\nexport default ImageUploader;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageUploader\");","map":{"version":3,"sources":["/Users/inoxwarrior/Harvest/harvest-FE/src/components/posts/ImageUploader.jsx"],"names":["React","useEffect","useState","ReactImageUploadComponent","ImageUploader","setImgUrl","setUploading","payload","setPayload","updateImage","event","file","data","FormData","append","abortFetch","AbortController","sendImage","response","fetch","method","body","signal","jsonResponse","json","error","console","log","abort"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,yBAAP,MAAsC,qBAAtC;;AAEA,SAASC,aAAT,CAAuB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAvB,EAAoD;AAAA;;AAClD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAMO,WAAW,GAAGC,KAAK,IAAI;AAC3B,QAAIC,IAAI,GAAGD,KAAK,CAAC,CAAD,CAAhB;AACA,QAAIE,IAAI,GAAG,IAAIC,QAAJ,EAAX;AACAD,IAAAA,IAAI,CAACE,MAAL,CAAY,MAAZ,EAAoBH,IAApB;AACAC,IAAAA,IAAI,CAACE,MAAL,CAAY,eAAZ,EAA6B,SAA7B;AACAN,IAAAA,UAAU,CAACI,IAAD,CAAV;AACD,GAND;;AAOAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,UAAU,GAAG,IAAIC,eAAJ,EAAnB;;AACA,UAAMC,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,YAAIV,OAAO,KAAK,IAAhB,EAAsB;AACpB,gBAAMW,QAAQ,GAAG,MAAMC,KAAK,CAC1B,wDAD0B,EAE1B;AACEC,YAAAA,MAAM,EAAE,MADV;AAEEC,YAAAA,IAAI,EAAEd,OAFR;AAGEe,YAAAA,MAAM,EAAEP,UAAU,CAACO;AAHrB,WAF0B,CAA5B;AAQA,gBAAMC,YAAY,GAAG,MAAML,QAAQ,CAACM,IAAT,EAA3B;AACAnB,UAAAA,SAAS,CAACkB,YAAY,CAAC,YAAD,CAAb,CAAT;AACAjB,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,OAdD,CAcE,OAAOmB,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KAlBD;;AAmBAR,IAAAA,SAAS;AACT,WAAO,MAAMF,UAAU,CAACa,KAAX,EAAb;AACD,GAvBQ,EAuBN,CAACrB,OAAD,EAAUF,SAAV,CAvBM,CAAT;AAyBA,sBACE,QAAC,yBAAD;AACE,IAAA,WAAW,EAAE,IADf;AAEE,IAAA,QAAQ,EAAEI,WAFZ;AAGE,IAAA,UAAU,EAAC,cAHb;AAIE,IAAA,SAAS,EAAC,aAJZ;AAKE,IAAA,WAAW,EAAE;AALf;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA5CQL,a;;KAAAA,a;AA8CT,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ReactImageUploadComponent from 'react-images-upload';\n\nfunction ImageUploader({ setImgUrl, setUploading }) {\n  const [payload, setPayload] = useState(null);\n\n  const updateImage = event => {\n    var file = event[0];\n    var data = new FormData();\n    data.append('file', file);\n    data.append('upload_preset', 'harvest');\n    setPayload(data);\n  };\n  useEffect(() => {\n    const abortFetch = new AbortController();\n    const sendImage = async () => {\n      try {\n        if (payload !== null) {\n          const response = await fetch(\n            'https://api.cloudinary.com/v1_1/dcbkjgr7c/image/upload',\n            {\n              method: 'post',\n              body: payload,\n              signal: abortFetch.signal\n            }\n          );\n          const jsonResponse = await response.json();\n          setImgUrl(jsonResponse['secure_url']);\n          setUploading(false);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    sendImage();\n    return () => abortFetch.abort();\n  }, [payload, setImgUrl]);\n\n  return (\n    <ReactImageUploadComponent\n      singleImage={true}\n      onChange={updateImage}\n      buttonText=\"Choose Image\"\n      className=\"imgUploader\"\n      withPreview={true}\n    />\n  );\n}\n\nexport default ImageUploader;\n"]},"metadata":{},"sourceType":"module"}