{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/inoxwarrior/Harvest/harvest-FE/src/components/chat/ChatPage.jsx\",\n    _s = $RefreshSig$();\n\nimport { format } from 'date-fns';\nimport React, { useEffect, useState } from 'react';\nimport ChatApi from '../../api/ChatApi';\n\nfunction ChatPage({\n  id,\n  thread\n}) {\n  _s();\n\n  const loggedInUser = window.sessionStorage.getItem('userEmail');\n  const receiverEmail = loggedInUser === thread.p1Email ? thread.p2Email : thread.p1Email;\n  const [messageText, setMessageText] = useState({\n    text: ''\n  });\n  const [messageArray, setMessageArray] = useState(thread.thread);\n\n  const sendMessage = async () => {\n    try {\n      const response = await ChatApi.createMessage(id, receiverEmail, {\n        messageBody: messageText.text,\n        thread: {\n          id: id\n        },\n        date: format(new Date(), 'dd-MMM-yyyy HH:MM')\n      });\n      setMessageArray([...messageArray, response.data]);\n      setMessageText({\n        text: ''\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleClick = e => {\n    e.preventDefault();\n    sendMessage();\n  };\n\n  useEffect(() => {\n    const poll = setInterval(() => {\n      const updateThread = async () => {\n        const response = await ChatApi.getThreadById(id);\n        setMessageArray(response.data.thread);\n      };\n\n      updateThread();\n    }, 1000);\n    return () => clearInterval(poll);\n  }, [id]);\n  const messages = messageArray === null ? null : messageArray.map(message => {\n    if (message.senderEmail === loggedInUser) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"outgoing_msg\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sent_msg\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.messageBody\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"time_date\",\n            children: [\" \", message.date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 19\n          }, this), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this)\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"incoming_msg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"incoming_msg_img\",\n          children: [' ', /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/images/sender.jpeg\",\n            alt: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 19\n          }, this), ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"received_msg\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"received_withd_msg\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: message.messageBody\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"time_date\",\n              children: [\" \", message.date]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }, this);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"msg_history\",\n      children: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"type_msg\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input_msg_write\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          autoFocus: true,\n          value: messageText.text,\n          id: \"chatInput\",\n          type: \"text\",\n          className: \"write_msg\",\n          onChange: e => setMessageText({\n            text: e.target.value\n          }),\n          placeholder: \"Type a message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"msg_send_btn\",\n          onClick: handleClick,\n          type: \"submit\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-paper-plane\",\n            \"aria-hidden\": \"true\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatPage, \"PE+ieK2DVzEkx9NKzWamHLuSRDE=\");\n\n_c = ChatPage;\nexport default ChatPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"sources":["/Users/inoxwarrior/Harvest/harvest-FE/src/components/chat/ChatPage.jsx"],"names":["format","React","useEffect","useState","ChatApi","ChatPage","id","thread","loggedInUser","window","sessionStorage","getItem","receiverEmail","p1Email","p2Email","messageText","setMessageText","text","messageArray","setMessageArray","sendMessage","response","createMessage","messageBody","date","Date","data","e","console","log","handleClick","preventDefault","poll","setInterval","updateThread","getThreadById","clearInterval","messages","map","message","senderEmail","target","value"],"mappings":"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","sourcesContent":["import { format } from 'date-fns';\nimport React, { useEffect, useState } from 'react';\nimport ChatApi from '../../api/ChatApi';\n\nfunction ChatPage({ id, thread }) {\n  const loggedInUser = window.sessionStorage.getItem('userEmail');\n  const receiverEmail = loggedInUser === thread.p1Email ? thread.p2Email : thread.p1Email;\n  const [messageText, setMessageText] = useState({ text: '' });\n  const [messageArray, setMessageArray] = useState(thread.thread);\n\n  const sendMessage = async () => {\n    try {\n      const response = await ChatApi.createMessage(id, receiverEmail, {\n        messageBody: messageText.text,\n        thread: { id: id },\n        date: format(new Date(), 'dd-MMM-yyyy HH:MM')\n      });\n      setMessageArray([...messageArray, response.data]);\n      setMessageText({ text: '' });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleClick = e => {\n    e.preventDefault();\n    sendMessage();\n  };\n\n  useEffect(() => {\n    const poll = setInterval(() => {\n      const updateThread = async () => {\n        const response = await ChatApi.getThreadById(id);\n        setMessageArray(response.data.thread);\n      };\n      updateThread();\n    }, 1000);\n    return () => clearInterval(poll);\n  }, [id]);\n\n  const messages =\n    messageArray === null\n      ? null\n      : messageArray.map(message => {\n          if (message.senderEmail === loggedInUser) {\n            return (\n              <div className=\"outgoing_msg\" key={message.id}>\n                <div className=\"sent_msg\">\n                  <p>{message.messageBody}</p>\n                  <span className=\"time_date\"> {message.date}</span>{' '}\n                </div>\n              </div>\n            );\n          } else {\n            return (\n              <div className=\"incoming_msg\" key={message.id}>\n                <div className=\"incoming_msg_img\">\n                  {' '}\n                  <img src=\"/images/sender.jpeg\" alt=\"name\" />{' '}\n                </div>\n                <div className=\"received_msg\">\n                  <div className=\"received_withd_msg\">\n                    <p>{message.messageBody}</p>\n                    <span className=\"time_date\"> {message.date}</span>\n                  </div>\n                </div>\n              </div>\n            );\n          }\n        });\n\n  return (\n    <form>\n      <div className=\"msg_history\">{messages}</div>\n      <div className=\"type_msg\">\n        <div className=\"input_msg_write\">\n          <input\n            autoFocus\n            value={messageText.text}\n            id=\"chatInput\"\n            type=\"text\"\n            className=\"write_msg\"\n            onChange={e => setMessageText({ text: e.target.value })}\n            placeholder=\"Type a message\"\n          />\n          <button className=\"msg_send_btn\" onClick={handleClick} type=\"submit\">\n            <i className=\"fa fa-paper-plane\" aria-hidden=\"true\"></i>\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default ChatPage;\n"]},"metadata":{},"sourceType":"module"}